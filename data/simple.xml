<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-6" xmlns:xhtml="http://www.w3.org/1999/xhtml"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-699: Software Development"
                  Version="4.11" Date="2023-04-27"
                  xsi:schemaLocation="http://cwe.mitre.org/cwe-6 http://cwe.mitre.org/data/xsd/cwe_schema_v6.10.xsd">
    <Weaknesses>
        <Weakness ID="1007" Name="Insufficient Visual Distinction of Homoglyphs Presented to User" Abstraction="Base"
                  Structure="Simple" Status="Incomplete">
            <Description>The product displays information or identifiers to a user, but the display mechanism does not
                make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs),
                which may cause the user to misinterpret a glyph and perform an unintended, insecure action.
            </Description>
            <Extended_Description>
                <xhtml:p>Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very
                    similar or identical to a human user. These are referred to as homoglyphs. For example, the
                    lowercase "l" (ell) and uppercase "I" (eye) have different character codes, but these characters can
                    be displayed in exactly the same way to a user, depending on the font. This can also occur between
                    different character sets. For example, the Latin capital letter "A" and the Greek capital letter "Α"
                    (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user.
                    Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave
                    mark "À" and its equivalent "Á" with the acute accent.
                </xhtml:p>
                <xhtml:p>Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing
                    a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a
                    different use of homoglyphs, an adversary may create a back door username that is visually similar
                    to the username of a regular user, which then makes it more difficult for a system administrator to
                    detect the malicious username while reviewing logs.
                </xhtml:p>
                this a test
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="451" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Resultant</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
                <Technology Class="Web Based" Prevalence="Sometimes"/>
            </Applicable_Platforms>
            <Alternate_Terms>
                <Alternate_Term>
                    <Term>Homograph Attack</Term>
                    <Description>"Homograph" is often used as a synonym of "homoglyph" by researchers, but according to
                        Wikipedia, a homograph is a word that has multiple, distinct meanings.
                    </Description>
                </Alternate_Term>
            </Alternate_Terms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                    <Note>This weakness may occur when characters from various character sets are allowed to be
                        interchanged within a URL, username, email address, etc. without any notification to the user or
                        underlying system being used.
                    </Note>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Scope>Confidentiality</Scope>
                    <Impact>Other</Impact>
                    <Note>An attacker may ultimately redirect a user to a malicious website, by deceiving the user into
                        believing the URL they are accessing is a trusted domain. However, the attack can also be used
                        to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the
                        first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site
                        Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the
                        attacker can mimic a trusted domain to steal account credentials and perform actions on behalf
                        of the user, without the user's knowledge. Similarly, an attacker could create a username for a
                        website that contains homoglyph characters, making it difficult for an admin to review logs and
                        determine which users performed which actions.
                    </Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method>
                    <Method>Manual Dynamic Analysis</Method>
                    <Description>If utilizing user accounts, attempt to submit a username that contains homoglyphs.
                        Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or
                        other mechanisms.
                    </Description>
                    <Effectiveness>Moderate</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>Use a browser that displays Punycode for IDNs in the URL and status bars, or which
                            color code various scripts in URLs.
                        </xhtml:p>
                        <xhtml:p>Due to the prominence of homoglyph attacks, several browsers now help safeguard against
                            this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will
                            display IDNs as Punycode if top-level domains do not restrict which characters can be used
                            in domain names or if labels mix scripts for different languages.
                        </xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>Use an email client that has strict filters and prevents messages that mix character
                            sets to end up in a user's inbox.
                        </xhtml:p>
                        <xhtml:p>Certain email clients such as Google's GMail prevent the use of non-Latin characters in
                            email addresses or in links contained within emails. This helps prevent homoglyph attacks by
                            flagging these emails and redirecting them to a user's spam folder.
                        </xhtml:p>
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The following looks like a simple, trusted URL that a user may frequently access.
                    </Intro_Text>
                    <Example_Code Nature="Attack">
                        <xhtml:div>http://www.еxаmрlе.соm</xhtml:div>
                    </Example_Code>
                    <Body_Text>However, the URL above is comprised of Cyrillic characters that look identical to the
                        expected ASCII characters. This results in most users not being able to distinguish between the
                        two and assuming that the above URL is trusted and safe. The "e" is actually the "CYRILLIC SMALL
                        LETTER IE" which is represented in HTML as the character &amp;#x435, while the "a" is actually
                        the "CYRILLIC SMALL LETTER A" which is represented in HTML as the character &amp;#x430. The "p",
                        "c", and "o" are also Cyrillic characters in this example. Viewing the source reveals a URL of
                        "http://www.&amp;#x435;x&amp;#x430;m&amp;#x440;l&amp;#x435;.&amp;#x441;&amp;#x43e;m". An
                        adversary can utilize this approach to perform an attack such as a phishing attack in order to
                        drive traffic to a malicious website.
                    </Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>The following displays an example of how creating usernames containing homoglyphs can
                        lead to log forgery.
                    </Intro_Text>
                    <Body_Text>Assume an adversary visits a legitimate, trusted domain and creates an account named
                        "admin", except the 'a' and 'i' characters are Cyrillic characters instead of the expected
                        ASCII. Any actions the adversary performs will be saved to the log file and look like they came
                        from a legitimate administrator account.
                    </Body_Text>
                    <Example_Code Nature="Result">
                        <xhtml:div>123.123.123.123 аdmіn [17/Jul/2017:09:05:49 -0400] "GET /example/users/userlist
                            HTTP/1.1" 401 12846
                            <xhtml:br/>
                            123.123.123.123 аdmіn [17/Jul/2017:09:06:51 -0400] "GET /example/users/userlist HTTP/1.1"
                            200 4523
                            <xhtml:br/>
                            123.123.123.123 admin [17/Jul/2017:09:10:02 -0400] "GET /example/users/editusers HTTP/1.1"
                            200 6291
                            <xhtml:br/>
                            123.123.123.123 аdmіn [17/Jul/2017:09:10:02 -0400] "GET /example/users/editusers HTTP/1.1"
                            200 6291
                            <xhtml:br/>
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>Upon closer inspection, the account that generated three of these log entries is "&amp;#x430;dm&amp;#x456;n".
                        Only the third log entry is by the legitimate admin account. This makes it more difficult to
                        determine which actions were performed by the adversary and which actions were executed by the
                        legitimate "admin" account.
                    </Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2013-7236</Reference>
                    <Description>web forum allows impersonation of users with homoglyphs in account names</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2013-7236</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2012-0584</Reference>
                    <Description>Improper character restriction in URLs in web browser</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2012-0584</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2009-0652</Reference>
                    <Description>Incomplete denylist does not include homoglyphs of "/" and "?" characters in URLs
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2009-0652</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-5015</Reference>
                    <Description>web browser does not convert hyphens to punycode, allowing IDN spoofing in URLs
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-5015</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2005-0233</Reference>
                    <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-0233</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2005-0234</Reference>
                    <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-0234</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2005-0235</Reference>
                    <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-0235</Link>
                </Observed_Example>
            </Observed_Examples>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="632"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-7"
                           Section="Chapter 11, &#34;Canonical Representation Issues&#34;, Page 382"/>
                <Reference External_Reference_ID="REF-8"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2017-07-24</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2018-03-27</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, Related_Attack_Patterns
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Observed_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-10-13</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, Related_Attack_Patterns
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1024" Name="Comparison of Incompatible Types" Abstraction="Base" Structure="Simple"
                  Status="Incomplete">
            <Description>The product performs a comparison between two entities, but the entities are of different,
                incompatible types that cannot be guaranteed to provide correct results when they are directly compared.
            </Description>
            <Extended_Description>In languages that are strictly typed but support casting/conversion, such as C or C++,
                the programmer might assume that casting one entity to the same type as another entity will ensure that
                the comparison will be performed correctly, but this cannot be guaranteed. In languages that are not
                strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the
                programmer is unaware of, causing unexpected results; for example, the string "123" might be converted
                to a number type. See examples.
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="697" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Name="JavaScript" Prevalence="Undetermined"/>
                <Language Name="PHP" Prevalence="Undetermined"/>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Varies by Context</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Testing</Phase>
                    <Description>Thoroughly test the comparison scheme before deploying code into production. Perform
                        positive testing as well as negative testing.
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-01-04</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1025" Name="Comparison Using Wrong Factors" Abstraction="Base" Structure="Simple"
                  Status="Incomplete">
            <Description>The code performs a comparison between two entities, but the comparison examines the wrong
                factors or characteristics of the entities, which can lead to incorrect results and resultant
                weaknesses.
            </Description>
            <Extended_Description>This can lead to incorrect results and resultant weaknesses. For example, the code
                might inadvertently compare references to objects, instead of the relevant contents of those objects,
                causing two "equal" objects to be considered unequal.
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="697" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Varies by Context</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Testing</Phase>
                    <Description>Thoroughly test the comparison scheme before deploying code into production. Perform
                        positive testing as well as negative testing.
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example Demonstrative_Example_ID="DX-60">
                    <Intro_Text>In the example below, two Java String objects are declared and initialized with the same
                        string values. An if statement is used to determine if the strings are equivalent.
                    </Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>String str1 = new String("Hello");<xhtml:br/>String str2 = new String("Hello");
                            <xhtml:br/>if (str1 == str2) {<xhtml:div style="margin-left:1em;">System.out.println("str1
                                == str2");</xhtml:div>}
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>However, the if statement will not be executed as the strings are compared using the "=="
                        operator. For Java objects, such as String objects, the "==" operator compares object
                        references, not object values. While the two String objects above contain the same string
                        values, they refer to different object references, so the System.out.println statement will not
                        be executed. To compare object values, the previous code could be modified to use the equals
                        method:
                    </Body_Text>
                    <Example_Code Nature="Good">
                        <xhtml:div>if (str1.equals(str2)) {<xhtml:div style="margin-left:1em;">System.out.println("str1
                            equals str2");</xhtml:div>}
                        </xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-01-04</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-03-15</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="135" Name="Incorrect Calculation of Multi-Byte String Length" Abstraction="Base"
                  Structure="Simple" Status="Draft">
            <Description>The product does not correctly calculate the length of strings that can contain wide or
                multi-byte characters.
            </Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Name="C" Prevalence="Undetermined"/>
                <Language Name="C++" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>
                        <xhtml:p>There are several ways in which improper string length checking may result in an
                            exploitable condition. All of these, however, involve the introduction of buffer overflow
                            conditions in order to reach an exploitable state.
                        </xhtml:p>
                        <xhtml:p>The first of these issues takes place when the output of a wide or multi-byte character
                            string, string-length function is used as a size for the allocation of memory. While this
                            will result in an output of the number of characters in the string, note that the characters
                            are most likely not a single byte, as they are with standard character strings. So, using
                            the size returned as the size sent to new or malloc and copying the string to this newly
                            allocated memory will result in a buffer overflow.
                        </xhtml:p>
                        <xhtml:p>Another common way these strings are misused involves the mixing of standard string and
                            wide or multi-byte string functions on a single string. Invariably, this mismatched
                            information will result in the creation of a possibly exploitable buffer overflow condition.
                        </xhtml:p>
                    </Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Scope>Confidentiality</Scope>
                    <Scope>Availability</Scope>
                    <Impact>Execute Unauthorized Code or Commands</Impact>
                    <Note>This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute
                        arbitrary code, which is usually outside the scope of a program's implicit security policy. This
                        can often be used to subvert any other security service.
                    </Note>
                </Consequence>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Scope>Confidentiality</Scope>
                    <Impact>Read Memory</Impact>
                    <Impact>DoS: Crash, Exit, or Restart</Impact>
                    <Impact>DoS: Resource Consumption (CPU)</Impact>
                    <Impact>DoS: Resource Consumption (Memory)</Impact>
                    <Note>Out of bounds memory access will very likely result in the corruption of relevant memory, and
                        perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability
                        are possible, including putting the program into an infinite loop.
                    </Note>
                </Consequence>
                <Consequence>
                    <Scope>Confidentiality</Scope>
                    <Impact>Read Memory</Impact>
                    <Note>In the case of an out-of-bounds read, the attacker may have access to sensitive information.
                        If the sensitive information contains system details, such as the current buffers position in
                        memory, this knowledge can be used to craft further attacks, possibly with more severe
                        consequences.
                    </Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-14">
                    <Method>Automated Static Analysis</Method>
                    <Description>Automated static analysis, commonly referred to as Static Application Security Testing
                        (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled
                        code) without having to execute it. Typically, this is done by building a model of data flow and
                        control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins
                        of input) with "sinks" (destinations where the data interacts with external components, a lower
                        layer such as the OS, etc.)
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>Always verify the length of the string unit character.</Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Strategy>Libraries or Frameworks</Strategy>
                    <Description>Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their
                        equivalent type (e.g.: byte, wchar_t, etc.)
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The following example would be exploitable if any of the commented incorrect malloc
                        calls were used.
                    </Intro_Text>
                    <Example_Code Nature="Bad" Language="C">
                        <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;strings.h&gt;<xhtml:br/>#include &lt;wchar.h&gt;<xhtml:br/>
                            <xhtml:br/>int main() {
                            <xhtml:div style="margin-left:1em;">
                                <xhtml:div>
                                    <xhtml:br/>wchar_t wideString[] = L"The spazzy orange tiger jumped " \
                                    <xhtml:br/>
                                    "over the tawny jaguar.";<xhtml:br/>wchar_t *newString;
                                    <xhtml:br/>
                                    <xhtml:br/>printf("Strlen() output: %d\nWcslen() output: %d\n",
                                    <xhtml:br/>
                                    strlen(wideString), wcslen(wideString));
                                    <xhtml:br/>
                                    <xhtml:br/>/* Wrong because the number of chars in a string isn't related to its
                                    length in bytes //<xhtml:br/>newString = (wchar_t *) malloc(strlen(wideString));
                                    <xhtml:br/>*/
                                    <xhtml:br/>
                                    <xhtml:br/>/* Wrong because wide characters aren't 1 byte long! //
                                    <xhtml:br/>
                                    newString = (wchar_t *) malloc(wcslen(wideString));<xhtml:br/>*/
                                    <xhtml:br/>
                                    <xhtml:br/>/* Wrong because wcslen does not include the terminating null */
                                    <xhtml:br/>newString = (wchar_t *) malloc(wcslen(wideString) * sizeof(wchar_t));
                                    <xhtml:br/>
                                    <xhtml:br/>/* correct! */<xhtml:br/>newString = (wchar_t *)
                                    malloc((wcslen(wideString) + 1) * sizeof(wchar_t));
                                    <xhtml:br/>
                                    <xhtml:br/>/* ... */
                                </xhtml:div>
                            </xhtml:div>
                            }
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>The output from the printf() statement would be:</Body_Text>
                    <Example_Code Nature="Result">
                        <xhtml:div>Strlen() output: 0<xhtml:br/>Wcslen() output: 53
                        </xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="CLASP">
                    <Entry_Name>Improper string length checking</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
                    <Entry_ID>FIO10-J</Entry_ID>
                    <Entry_Name>Ensure the array is filled when using read() to fill an array</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
                    <Entry_ID>SFP10</Entry_ID>
                    <Entry_Name>Incorrect Buffer Length Computation</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-7"
                           Section="Chapter 5, &#34;Unicode and ANSI Buffer Size Mismatches&#34; Page 153"/>
                <Reference External_Reference_ID="REF-18"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CLASP</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-11-24</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-02-16</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Relationships,
                        Taxonomy_Mappings
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-06-23</Modification_Date>
                    <Modification_Comment>updated Enabling_Factors_for_Exploitation, Other_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Enabling_Factors_for_Exploitation, Modes_of_Introduction, References,
                        Taxonomy_Mappings
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2018-03-27</Modification_Date>
                    <Modification_Comment>updated References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-03-15</Modification_Date>
                    <Modification_Comment>updated References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
                <Contribution Type="Feedback">
                    <Contribution_Name>Gregory Padgett</Contribution_Name>
                    <Contribution_Organization>Unitrends</Contribution_Organization>
                    <Contribution_Date>2010-01-11</Contribution_Date>
                    <Contribution_Comment>correction to Demonstrative_Example</Contribution_Comment>
                </Contribution>
                <Previous_Entry_Name Date="2008-04-11">Improper String Length Checking</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="1389" Name="Incorrect Parsing of Numbers with Different Radices" Abstraction="Base"
                  Structure="Simple" Status="Incomplete">
            <Description>The product parses numeric input assuming base 10 (decimal) values, but it does not account for
                inputs that use a different base number (radix).
            </Description>
            <Extended_Description>
                <xhtml:p>Frequently, a numeric input that begins with "0" is treated as octal, or "0x" causes it to be
                    treated as hexadecimal, e.g. by the inet_addr() function. For example, "023" (octal) is 35 decimal,
                    or "0x31" is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only
                    inputs, the code could produce incorrect numbers when the inputs are parsed using a different base.
                    This can result in unexpected and/or dangerous behavior. For example, a "0127.0.0.1" IP address is
                    parsed as octal due to the leading "0", whose numeric value would be the same as 87.0.0.1 (decimal),
                    where the developer likely expected to use 127.0.0.1.
                </xhtml:p>
                <xhtml:p>The consequences vary depending on the surrounding code in which this weakness occurs, but they
                    can include bypassing network-based access control using unexpected IP addresses or netmasks, or
                    causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications,
                    this can enable bypassing of SSRF restrictions.
                </xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="704" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>Input validation used may assume decimal bases during conditional checks, when it may not
                        always be the case.
                    </Note>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>The application may rely on a service that supports different numerical bases.</Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Confidentiality</Scope>
                    <Impact>Read Application Data</Impact>
                    <Likelihood>Unknown</Likelihood>
                    <Note>An attacker may use an unexpected numerical base to access private application resources.
                    </Note>
                </Consequence>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Bypass Protection Mechanism</Impact>
                    <Impact>Alter Execution Logic</Impact>
                    <Likelihood>Unknown</Likelihood>
                    <Note>An attacker may use an unexpected numerical base to bypass or manipulate access control
                        mechanisms.
                    </Note>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Strategy>Enforcement by Conversion</Strategy>
                    <Description>If only decimal-based values are expected in the application, conditional checks should
                        be created in a way that prevent octal or hexadecimal strings from being checked. This can be
                        achieved by converting any numerical string to an explicit base-10 integer prior to the
                        conditional check, to prevent octal or hex values from ever being checked against the condition.
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>If various numerical bases do need to be supported, check for leading values indicating
                        the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to
                        integers of the respective base. Reject any other alternative-base string that is not
                        intentionally supported by the application.
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>If regular expressions are used to validate IP addresses, ensure that they are bounded
                        using ^ and $ to prevent base-prepended IP addresses from being matched.
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The below demonstrative example uses an IP validator that splits up an IP address by
                        octet, tests to ensure each octet can be casted into an integer, and then returns the original
                        IP address if no exceptions are raised. This validated IP address is then tested using the
                        "ping" command.
                    </Intro_Text>
                    <Example_Code Nature="bad" Language="Python">
                        <xhtml:div>
                            import subprocess
                            <xhtml:br/>
                            <xhtml:br/>
                            def validate_ip(ip: str):
                            <xhtml:br/>
                            <xhtml:div style="margin-left:1em;">
                                split_ip = ip.split('.')
                                <xhtml:br/>
                                if len(split_ip) &gt; 4 or len(split_ip) == 0:
                                <xhtml:br/>
                                <xhtml:div style="margin-left:1em;">
                                    raise ValueError("Invalid IP length")
                                    <xhtml:br/>
                                </xhtml:div>
                                <xhtml:br/>
                                for octet in split_ip:
                                <xhtml:br/>
                                <xhtml:div style="margin-left:1em;">
                                    try:
                                    <xhtml:br/>
                                    <xhtml:div style="margin-left:1em;">
                                        int(octet, 10)
                                        <xhtml:br/>
                                    </xhtml:div>
                                    except ValueError as e:
                                    <xhtml:br/>
                                    <xhtml:div style="margin-left:1em;">
                                        raise ValueError(f"Cannot convert IP octet to int - {e}")
                                        <xhtml:br/>
                                    </xhtml:div>
                                </xhtml:div>
                                <xhtml:br/>
                                <xhtml:i># Returns original IP after ensuring no exceptions are raised</xhtml:i>
                                <xhtml:br/>
                                return ip
                                <xhtml:br/>

                            </xhtml:div>
                            <xhtml:br/>
                            def run_ping(ip: str):
                            <xhtml:br/>
                            <xhtml:div style="margin-left:1em;">
                                validated = validate_ip(ip)
                                <xhtml:br/>
                                <xhtml:i># The ping command treats zero-prepended IP addresses as octal</xhtml:i>
                                <xhtml:br/>
                                result = subprocess.call(["ping", validated])
                                <xhtml:br/>
                                print(result)
                                <xhtml:br/>
                            </xhtml:div>
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>If run_ping() were to be called with one or more zero-prepended octets, validate_ip()
                        will succeed as zero-prepended numerical strings can be interpreted as decimal by a cast ("012"
                        would cast to 12). However, as the original IP with the prepended zeroes is returned rather than
                        the casted IP, it will be used in the call to the ping command. Ping DOES check and support
                        octal-based IP octets, so the IP reached via ping may be different than the IP assumed by the
                        validator. For example, ping would considered "0127.0.0.1" the same as "87.0.0.1".
                    </Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example Demonstrative_Example_ID="DX-154">
                    <Intro_Text>This code uses a regular expression to validate an IP string prior to using it in a call
                        to the "ping" command.
                    </Intro_Text>
                    <Example_Code Nature="bad" Language="Python">
                        <xhtml:div>
                            import subprocess
                            <xhtml:br/>
                            import re
                            <xhtml:br/>
                            <xhtml:br/>
                            def validate_ip_regex(ip: str):
                            <xhtml:br/>
                            <xhtml:div style="margin-left:1em;">
                                ip_validator = re.compile(r"((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}")
                                <xhtml:br/>
                                if ip_validator.match(ip):
                                <xhtml:br/>
                                <xhtml:div style="margin-left:1em;">
                                    return ip
                                    <xhtml:br/>
                                </xhtml:div>
                                else:
                                <xhtml:br/>
                                <xhtml:div style="margin-left:1em;">
                                    raise ValueError("IP address does not match valid pattern.")
                                    <xhtml:br/>
                                </xhtml:div>
                            </xhtml:div>
                            <xhtml:br/>
                            def run_ping_regex(ip: str):
                            <xhtml:br/>
                            <xhtml:div style="margin-left:1em;">
                                validated = validate_ip_regex(ip)
                                <xhtml:br/>
                                <xhtml:i># The ping command treats zero-prepended IP addresses as octal</xhtml:i>
                                <xhtml:br/>
                                result = subprocess.call(["ping", validated])
                                <xhtml:br/>
                                print(result)
                                <xhtml:br/>
                            </xhtml:div>
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^
                        or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result
                        in a matched regex pattern. Since the ping command supports octal and hex prepended IP
                        addresses, it will use the unexpectedly valid IP address (CWE-1389). For example,
                        "0x63.63.63.63" would be considered equivalent to "99.63.63.63". As a result, the attacker could
                        potentially ping systems that the attacker cannot reach directly.
                    </Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>
                        <xhtml:p>Consider the following scenario, inspired by CWE team member Kelly Todd.</xhtml:p>
                        <xhtml:p>Kelly wants to set up monitoring systems for his two cats, who pose very different
                            threats. One cat, Night, tweets embarrassing or critical comments about his owner in ways
                            that could cause reputational damage, so Night's blog needs to be monitored regularly. The
                            other cat, Taki, likes to distract Kelly and his coworkers during business meetings with
                            cute meows, so Kelly monitors Taki's location using a different web site.
                        </xhtml:p>
                        <xhtml:p>Suppose /etc/hosts provides the site info as follows:</xhtml:p>
                    </Intro_Text>
                    <Example_Code Nature="bad" Language="Other">
                        <xhtml:div>
                            taki.example.com 10.1.0.7
                            <xhtml:br/>
                            night.example.com 010.1.0.8
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>The entry for night.example.com has a typo "010" in the first octet. When using ping to
                        ensure the servers are up, the leading 0 causes the IP address to be converted using octal. So
                        when Kelly's script attempts to access night.example.com, it inadvertently scans 8.1.0.8 instead
                        of 10.1.0.8 (since "010" in octal is 8 in decimal), and Night is free to send new Tweets without
                        being immediately detected.
                    </Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2021-29662</Reference>
                    <Description>Chain: Use of zero-prepended IP addresses in Perl-based IP validation module can lead
                        to an access control bypass.
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-29662</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2021-28918</Reference>
                    <Description>Chain: Use of zero-prepended IP addresses in a product that manages IP blocks can lead
                        to an SSRF.
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-28918</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2021-29921</Reference>
                    <Description>Chain: Use of zero-prepended IP addresses in a Python standard library package can lead
                        to an SSRF.
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-29921</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2021-29923</Reference>
                    <Description>Chain: Use of zero-prepended IP addresses in the net Golang library can lead to an
                        access control bypass.
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-29923</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2021-29424</Reference>
                    <Description>Chain: Use of zero-prepended IP addresses in Perl netmask module allows bypass of
                        IP-based access control.
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-29424</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2016-4029</Reference>
                    <Description>Chain: incorrect validation of intended decimal-based IP address format (CWE-1286)
                        enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF
                        protection mechanism (CWE-918).
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2016-4029</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2020-13776</Reference>
                    <Description>Mishandling of hex-valued usernames leads to unexpected decimal conversion and
                        privilege escalation in the systemd Linux suite.
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2020-13776</Link>
                </Observed_Example>
            </Observed_Examples>
            <References>
                <Reference External_Reference_ID="REF-1284"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>Anonymous External Contributor</Submission_Name>
                    <Submission_Date>2021-05-28</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1392" Name="Use of Default Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses default credentials (such as passwords or cryptographic keys) for potentially
                critical functionality.
            </Description>
            <Extended_Description>
                It is common practice for products to be designed to use
                default keys, passwords, or other mechanisms for
                authentication. The rationale is to simplify the
                manufacturing process or the system administrator's task of
                installation and deployment into an enterprise. However, if
                admins do not change the defaults, it is easier for attackers
                to bypass authentication quickly across multiple
                organizations.
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1391" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
                <Operating_System Class="Not OS-Specific" Prevalence="Undetermined"/>
                <Architecture Class="Not Architecture-Specific" Prevalence="Undetermined"/>
                <Technology Class="ICS/OT" Prevalence="Undetermined"/>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Authentication</Scope>
                    <Impact>Gain Privileges or Assume Identity</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Requirements</Phase>
                    <Description>Prohibit use of default, hard-coded, or other values that do not vary for each
                        installation of the product - especially for separate organizations.
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Mitigation>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Description>Force the administrator to change the credential upon installation.</Description>
                    <Effectiveness>High</Effectiveness>
                </Mitigation>
                <Mitigation>
                    <Phase>Installation</Phase>
                    <Phase>Operation</Phase>
                    <Description>The product administrator could change the defaults upon installation or during
                        operation.
                    </Description>
                    <Effectiveness>Moderate</Effectiveness>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example Demonstrative_Example_ID="DX-153">
                    <Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology
                        (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were
                        "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries
                        to change how the products operated, ranging from denial of service to changing the code that
                        the products executed. Since these products were often used in industries such as power,
                        electrical, water, and others, there could even be safety implications.
                    </Intro_Text>
                    <Body_Text>At least one OT product used default credentials.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2022-30270</Reference>
                    <Description>Remote Terminal Unit (RTU) uses default credentials for some SSH accounts</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2022-30270</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2021-41192</Reference>
                    <Description>data visualization/sharing package uses default secret keys or cookie values if they
                        are not specified in environment variables
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-41192</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2021-38759</Reference>
                    <Description>microcontroller board has default password</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2021-38759</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2010-2306</Reference>
                    <Description>Intrusion Detection System (IDS) uses the same static, private SSL keys for multiple
                        devices and installations, allowing decryption of SSL traffic
                    </Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2010-2306</Link>
                </Observed_Example>
            </Observed_Examples>
            <References>
                <Reference External_Reference_ID="REF-1283"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2022-10-07</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples,
                        References
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="140" Name="Improper Neutralization of Delimiters" Abstraction="Base" Structure="Simple"
                  Status="Draft">
            <Description>The product does not neutralize or incorrectly neutralizes delimiters.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="138" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Unexpected State</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>Developers should anticipate that delimiters will be injected/removed/manipulated in
                        the input vectors of their product. Use an appropriate combination of denylists and allowlists
                        to ensure only valid, expected and appropriate input is processed by the system.
                    </Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-5">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>
                        <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy,
                            i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any
                            input that does not strictly conform to specifications, or transform it into something that
                            does.
                        </xhtml:p>
                        <xhtml:p>When performing input validation, consider all potentially relevant properties,
                            including length, type of input, the full range of acceptable values, missing or extra
                            inputs, syntax, consistency across related fields, and conformance to business rules. As an
                            example of business rule logic, "boat" may be syntactically valid because it only contains
                            alphanumeric characters, but it is not valid if the input is only expected to contain colors
                            such as "red" or "blue."
                        </xhtml:p>
                        <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs. This is likely to
                            miss at least one undesirable input, especially if the code's environment changes. This can
                            give attackers enough room to bypass the intended validation. However, denylists can be
                            useful for detecting potential attacks or determining which inputs are so malformed that
                            they should be rejected outright.
                        </xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-28">
                    <Phase>Implementation</Phase>
                    <Strategy>Output Encoding</Strategy>
                    <Description>While it is risky to use dynamically-generated query strings, code, or commands that
                        mix control and data together, sometimes it may be unavoidable. Properly quote arguments and
                        escape any special characters within those arguments. The most conservative approach is to
                        escape or filter all characters that do not pass an extremely strict allowlist (such as
                        everything that is not alphanumeric or white space). If some special characters are still
                        needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be
                        careful of argument injection (CWE-88).
                    </Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-20">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>Inputs should be decoded and canonicalized to the application's current internal
                        representation before being validated (CWE-180). Make sure that the application does not decode
                        the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes
                        by introducing dangerous inputs after they have been checked.
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="PLOVER">
                    <Entry_Name>Delimiter Problems</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
                    <Entry_ID>SFP24</Entry_ID>
                    <Entry_Name>Tainted input to command</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="15"/>
            </Related_Attack_Patterns>
            <Content_History>
                <Submission>
                    <Submission_Name>PLOVER</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-07-27</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-06-21</Modification_Date>
                    <Modification_Comment>updated Description, Name</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-03-29</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2013-02-21</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-05-03</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2008-04-11">Delimiter Problems</Previous_Entry_Name>
                <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize Delimiters</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="15" Name="External Control of System or Configuration Setting" Abstraction="Base"
                  Structure="Simple" Status="Incomplete">
            <Description>One or more system settings or configuration elements can be externally controlled by a user.
            </Description>
            <Extended_Description>Allowing external control of system settings can disrupt service or cause an
                application to behave in unexpected, and potentially malicious ways.
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
                <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>Setting manipulation vulnerabilities occur when an attacker can control values that govern the
                        behavior of the system, manage specific resources, or in some way affect the functionality of
                        the application.
                    </Note>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>REALIZATION: This weakness is caused during implementation of an architectural security
                        tactic.
                    </Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Varies by Context</Impact>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-14">
                    <Method>Automated Static Analysis</Method>
                    <Description>Automated static analysis, commonly referred to as Static Application Security Testing
                        (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled
                        code) without having to execute it. Typically, this is done by building a model of data flow and
                        control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins
                        of input) with "sinks" (destinations where the data interacts with external components, a lower
                        layer such as the OS, etc.)
                    </Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation Mitigation_ID="MIT-46">
                    <Phase>Architecture and Design</Phase>
                    <Strategy>Separation of Privilege</Strategy>
                    <Description>
                        <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be
                            unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and
                            always be careful when interfacing with a compartment outside of the safe area.
                        </xhtml:p>
                        <xhtml:p>Ensure that appropriate compartmentalization is built into the system design, and the
                            compartmentalization allows for and reinforces privilege separation functionality.
                            Architects and designers should rely on the principle of least privilege to decide the
                            appropriate time to use privileges and the time to drop privileges.
                        </xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Phase>Architecture and Design</Phase>
                    <Description>Because setting manipulation covers a diverse set of functions, any attempt at
                        illustrating it will inevitably be incomplete. Rather than searching for a tight-knit
                        relationship between the functions addressed in the setting manipulation category, take a step
                        back and consider the sorts of system values that an attacker should not be allowed to control.
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Phase>Architecture and Design</Phase>
                    <Description>In general, do not allow user-provided or otherwise untrusted data to control sensitive
                        values. The leverage that an attacker gains by controlling these values is not always
                        immediately obvious, but do not underestimate the creativity of the attacker.
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The following C code accepts a number as one of its command line parameters and sets it
                        as the host ID of the current machine.
                    </Intro_Text>
                    <Example_Code Nature="Bad" Language="C">
                        <xhtml:div>...<xhtml:br/>sethostid(argv[1]);<xhtml:br/>...
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>Although a process must be privileged to successfully invoke sethostid(), unprivileged
                        users may be able to invoke the program. The code in this example allows user input to directly
                        control the value of a system setting. If an attacker provides a malicious value for host ID,
                        the attacker can misidentify the affected machine on the network or cause other unintended
                        behavior.
                    </Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>The following Java code snippet reads a string from an HttpServletRequest and sets it as
                        the active catalog for a database Connection.
                    </Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>...<xhtml:br/>conn.setCatalog(request.getParameter("catalog"));<xhtml:br/>...
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>In this example, an attacker could cause an error by providing a nonexistent catalog name
                        or connect to an unauthorized portion of the database.
                    </Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
                    <Entry_Name>Setting Manipulation</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
                    <Entry_ID>SFP25</Entry_ID>
                    <Entry_Name>Tainted input to variable</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="13"/>
                <Related_Attack_Pattern CAPEC_ID="146"/>
                <Related_Attack_Pattern CAPEC_ID="176"/>
                <Related_Attack_Pattern CAPEC_ID="203"/>
                <Related_Attack_Pattern CAPEC_ID="270"/>
                <Related_Attack_Pattern CAPEC_ID="271"/>
                <Related_Attack_Pattern CAPEC_ID="579"/>
                <Related_Attack_Pattern CAPEC_ID="69"/>
                <Related_Attack_Pattern CAPEC_ID="76"/>
                <Related_Attack_Pattern CAPEC_ID="77"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-6"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-10-14</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-01-12</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-10-29</Modification_Date>
                    <Modification_Comment>updated Modes_of_Introduction, Other_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-04-05</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2013-02-21</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-01-19</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-06-20</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-12-10</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-10-28</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Related_Attack_Patterns, Relationships
                    </Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2008-04-11">Setting Manipulation</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="166" Name="Improper Handling of Missing Special Element" Abstraction="Base" Structure="Simple" Status="Draft">
            <Description>The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="159" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Availability</Scope>
                    <Impact>DoS: Crash, Exit, or Restart</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Description>Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-5">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>
                        <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                        <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                        <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-20">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2002-1362</Reference>
                    <Description>Crash via message type without separator character</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2002-1362</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2002-0729</Reference>
                    <Description>Missing special character (separator) causes crash</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2002-0729</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2002-1532</Reference>
                    <Description>HTTP GET without \r\n\r\n CRLF sequences causes product to wait indefinitely and prevents other users from accessing it</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2002-1532</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="PLOVER">
                    <Entry_Name>Missing Special Element</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Content_History>
                <Submission>
                    <Submission_Name>PLOVER</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-03-10</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Description, Name</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-07-27</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-10-29</Modification_Date>
                    <Modification_Comment>updated Other_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-03-29</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-05-03</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2008-04-11">Missing Special Element</Previous_Entry_Name>
                <Previous_Entry_Name Date="2009-05-27">Failure to Handle Missing Special Element</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="167" Name="Improper Handling of Additional Special Element" Abstraction="Base" Structure="Simple" Status="Draft">
            <Description>The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="159" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Unexpected State</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Description>Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-5">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>
                        <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                        <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                        <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-28">
                    <Phase>Implementation</Phase>
                    <Strategy>Output Encoding</Strategy>
                    <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-20">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2000-0116</Reference>
                    <Description>Extra "&lt;" in front of SCRIPT tag.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2000-0116</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2001-1157</Reference>
                    <Description>Extra "&lt;" in front of SCRIPT tag.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2001-1157</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2002-2086</Reference>
                    <Description>"&lt;script" - probably a cleansing error</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2002-2086</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="PLOVER">
                    <Entry_Name>Extra Special Element</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Content_History>
                <Submission>
                    <Submission_Name>PLOVER</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-03-10</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Description, Name</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-07-27</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-03-29</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-05-03</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Potential_Mitigations, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2008-04-11">Extra Special Element</Previous_Entry_Name>
                <Previous_Entry_Name Date="2009-05-27">Failure to Handle Additional Special Element</Previous_Entry_Name>
            </Content_History>
        </Weakness>

        <Weakness ID="1007" Name="Insufficient Visual Distinction of Homoglyphs Presented to User" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.</Description>
            <Extended_Description>
                <xhtml:p>Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase "l" (ell) and uppercase "I" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter "A" and the Greek capital letter "Α" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark "À" and its equivalent "Á" with the acute accent.</xhtml:p>
                <xhtml:p>Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="451" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Resultant</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
                <Technology Class="Web Based" Prevalence="Sometimes"/>
            </Applicable_Platforms>
            <Alternate_Terms>
                <Alternate_Term>
                    <Term>Homograph Attack</Term>
                    <Description>"Homograph" is often used as a synonym of "homoglyph" by researchers, but according to Wikipedia, a homograph is a word that has multiple, distinct meanings.</Description>
                </Alternate_Term>
            </Alternate_Terms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                    <Note>This weakness may occur when characters from various character sets are allowed to be interchanged within a URL, username, email address, etc. without any notification to the user or underlying system being used.</Note>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Scope>Confidentiality</Scope>
                    <Impact>Other</Impact>
                    <Note>An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions.</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method>
                    <Method>Manual Dynamic Analysis</Method>
                    <Description>If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.</Description>
                    <Effectiveness>Moderate</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.</xhtml:p>
                        <xhtml:p>Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.</xhtml:p>
                        <xhtml:p>Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.</xhtml:p>
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The following looks like a simple, trusted URL that a user may frequently access.</Intro_Text>
                    <Example_Code Nature="Attack">
                        <xhtml:div>http://www.еxаmрlе.соm</xhtml:div>
                    </Example_Code>
                    <Body_Text>However, the URL above is comprised of Cyrillic characters that look identical to the expected ASCII characters. This results in most users not being able to distinguish between the two and assuming that the above URL is trusted and safe. The "e" is actually the "CYRILLIC SMALL LETTER IE" which is represented in HTML as the character &amp;#x435, while the "a" is actually the "CYRILLIC SMALL LETTER A" which is represented in HTML as the character &amp;#x430.  The "p", "c", and "o" are also Cyrillic characters in this example. Viewing the source reveals a URL of "http://www.&amp;#x435;x&amp;#x430;m&amp;#x440;l&amp;#x435;.&amp;#x441;&amp;#x43e;m". An adversary can utilize this approach to perform an attack such as a phishing attack in order to drive traffic to a malicious website.</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>The following displays an example of how creating usernames containing homoglyphs can lead to log forgery.</Intro_Text>
                    <Body_Text>Assume an adversary visits a legitimate, trusted domain and creates an account named "admin", except the 'a' and 'i' characters are Cyrillic characters instead of the expected ASCII. Any actions the adversary performs will be saved to the log file and look like they came from a legitimate administrator account.</Body_Text>
                    <Example_Code Nature="Result">
                        <xhtml:div>123.123.123.123 аdmіn [17/Jul/2017:09:05:49 -0400] "GET /example/users/userlist HTTP/1.1" 401 12846<xhtml:br/>
                            123.123.123.123 аdmіn [17/Jul/2017:09:06:51 -0400] "GET /example/users/userlist HTTP/1.1" 200 4523<xhtml:br/>
                            123.123.123.123 admin [17/Jul/2017:09:10:02 -0400] "GET /example/users/editusers HTTP/1.1" 200 6291<xhtml:br/>
                            123.123.123.123 аdmіn [17/Jul/2017:09:10:02 -0400] "GET /example/users/editusers HTTP/1.1" 200 6291<xhtml:br/>
                        </xhtml:div>
                    </Example_Code>
                    <Body_Text>Upon closer inspection, the account that generated three of these log entries is "&amp;#x430;dm&amp;#x456;n". Only the third log entry is by the legitimate admin account. This makes it more difficult to determine which actions were performed by the adversary and which actions were executed by the legitimate "admin" account.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2013-7236</Reference>
                    <Description>web forum allows impersonation of users with homoglyphs in account names</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2013-7236</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2012-0584</Reference>
                    <Description>Improper character restriction in URLs in web browser</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2012-0584</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2009-0652</Reference>
                    <Description>Incomplete denylist does not include homoglyphs of "/" and "?" characters in URLs</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2009-0652</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-5015</Reference>
                    <Description>web browser does not convert hyphens to punycode, allowing IDN spoofing in URLs</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-5015</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2005-0233</Reference>
                    <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-0233</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2005-0234</Reference>
                    <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-0234</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2005-0235</Reference>
                    <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-0235</Link>
                </Observed_Example>
            </Observed_Examples>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="632"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Canonical Representation Issues&#34;, Page 382"/>
                <Reference External_Reference_ID="REF-8"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2017-07-24</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2018-03-27</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Observed_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-10-13</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1021" Name="Improper Restriction of Rendered UI Layers or Frames" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.</Description>
            <Extended_Description>A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.</Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="441" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="451" View_ID="1000"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Technology Class="Web Based" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Alternate_Terms>
                <Alternate_Term>
                    <Term>Clickjacking</Term>
                </Alternate_Term>
                <Alternate_Term>
                    <Term>UI Redress Attack</Term>
                </Alternate_Term>
                <Alternate_Term>
                    <Term>Tapjacking</Term>
                    <Description>"Tapjacking" is similar to clickjacking, except it is used for mobile applications in which the user "taps" the application instead of performing a mouse click.</Description>
                </Alternate_Term>
            </Alternate_Terms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Access Control</Scope>
                    <Impact>Gain Privileges or Assume Identity</Impact>
                    <Impact>Bypass Protection Mechanism</Impact>
                    <Impact>Read Application Data</Impact>
                    <Impact>Modify Application Data</Impact>
                    <Note>An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-14">
                    <Method>Automated Static Analysis</Method>
                    <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.</xhtml:p>
                        <xhtml:p>The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>
                        <xhtml:p>A developer can use a "frame-breaker" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.</xhtml:p>
                        <xhtml:p>It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The "frame-breaking" script does not intuitively account for multiple nested frames that can be presented to the user.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the "frame-ancestors" directive or the "frame-src" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2017-7440</Reference>
                    <Description>E-mail preview feature in a desktop application allows clickjacking attacks via a crafted e-mail message</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-7440</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-5697</Reference>
                    <Description>Hardware/firmware product has insufficient clickjacking protection in its web user interface</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-5697</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-4015</Reference>
                    <Description>Clickjacking in data-loss prevention product via HTTP response header.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-4015</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2016-2496</Reference>
                    <Description>Tapjacking in permission dialog for mobile OS allows access of private storage using a partially-overlapping window.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2016-2496</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2015-1241</Reference>
                    <Description>Tapjacking in web browser related to page navigation and touch/gesture events.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2015-1241</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-0492</Reference>
                    <Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-0492</Link>
                </Observed_Example>
            </Observed_Examples>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="103"/>
                <Related_Attack_Pattern CAPEC_ID="181"/>
                <Related_Attack_Pattern CAPEC_ID="222"/>
                <Related_Attack_Pattern CAPEC_ID="504"/>
                <Related_Attack_Pattern CAPEC_ID="506"/>
                <Related_Attack_Pattern CAPEC_ID="587"/>
                <Related_Attack_Pattern CAPEC_ID="654"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-35"/>
                <Reference External_Reference_ID="REF-36"/>
                <Reference External_Reference_ID="REF-37"/>
                <Reference External_Reference_ID="REF-38"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2017-08-01</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-06-20</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-10-28</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1024" Name="Comparison of Incompatible Types" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.</Description>
            <Extended_Description>In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed.  In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string "123" might be converted to a number type.  See examples.</Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="697" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Name="JavaScript" Prevalence="Undetermined"/>
                <Language Name="PHP" Prevalence="Undetermined"/>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Varies by Context</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Testing</Phase>
                    <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-01-04</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1025" Name="Comparison Using Wrong Factors" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.</Description>
            <Extended_Description>This can lead to incorrect results and resultant weaknesses.  For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two "equal" objects to be considered unequal.</Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="697" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Varies by Context</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Testing</Phase>
                    <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example Demonstrative_Example_ID="DX-60">
                    <Intro_Text>In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>String str1 = new String("Hello");<xhtml:br/>String str2 = new String("Hello");<xhtml:br/>if (str1 == str2) {<xhtml:div style="margin-left:1em;">System.out.println("str1 == str2");</xhtml:div>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>However, the if statement will not be executed as the strings are compared using the "==" operator. For Java objects, such as String objects, the "==" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:</Body_Text>
                    <Example_Code Nature="Good">
                        <xhtml:div>if (str1.equals(str2)) {<xhtml:div style="margin-left:1em;">System.out.println("str1 equals str2");</xhtml:div>}</xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-01-04</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-03-15</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1037" Name="Processor Optimization Removal or Modification of Security-critical Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1038" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                    <Description>This weakness does not depend on other weaknesses and is the result of choices made by the processor in executing the specified application.</Description>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Rarely"/>
                <Technology Name="Processor Hardware" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                    <Note>Optimizations built into the design of the processor can have unintended consequences during the execution of an application.</Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Bypass Protection Mechanism</Impact>
                    <Likelihood>High</Likelihood>
                    <Note>A successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible.</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method>
                    <Method>White Box</Method>
                    <Description>In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.</Description>
                    <Effectiveness>Opportunistic</Effectiveness>
                    <Effectiveness_Notes>Although the mentioned detection method is theoretically possible, the use of speculative execution is a preferred way of increasing processor performance. The reality is that a large number of statements are executed out of order, and determining if any of them break an access control property would be extremely opportunistic.</Effectiveness_Notes>
                </Detection_Method>
            </Detection_Methods>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2017-5715</Reference>
                    <Description>Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as "Spectre".</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-5715</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-5753</Reference>
                    <Description>Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as "Spectre".</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-5753</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2017-5754</Reference>
                    <Description>Intel processor optimizations related to speculative execution cause access control checks to be bypassed when placing data into the cache. Often known as "Meltdown".</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2017-5754</Link>
                </Observed_Example>
            </Observed_Examples>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="663"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-11"/>
                <Reference External_Reference_ID="REF-12"/>
            </References>
            <Notes>
                <Note Type="Maintenance">As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10.</Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-03-07</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-03-15</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-10-13</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Maintenance_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1041" Name="Use of Redundant Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product has multiple functions, methods, procedures, macros, etc. that
                contain the same code.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Merge common functionality into a single function and then call that function from across the entire code base.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>In the following Java example the code performs some complex math when specific test conditions are met. The math is the same in each case and the equations are repeated within the code. Unfortunately if a future change needs to be made then that change needs to be made in all locations. This opens the door to mistakes being made and the changes not being made in the same way in each instance.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>public class Main {<xhtml:br/>
                            <xhtml:div style="margin-left:1em;">public static void main(String[] args) {
                                <xhtml:div style="margin-left:1em;">double s = 10.0;
                                    <xhtml:br/>double r = 1.0;
                                    <xhtml:br/>double pi = 3.14159;
                                    <xhtml:br/>double surface_area;<xhtml:br/>
                                    <xhtml:br/>if(r &gt; 0.0) {
                                    <xhtml:div style="margin-left:1em;">// complex math equations
                                        <xhtml:br/>surface_area = pi * r * s + pi * Math.pow(r, 2);</xhtml:div>
                                    <xhtml:br/>}<xhtml:br/>
                                    <xhtml:br/>if(r &gt; 1.0) {
                                    <xhtml:div style="margin-left:1em;">// a complex set of math
                                        <xhtml:br/>surface_area = pi * r * s + pi * Math.pow(r, 2);</xhtml:div>
                                    <xhtml:br/>}</xhtml:div>
                                <xhtml:br/>}</xhtml:div><xhtml:br/>
                            <xhtml:br/>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>It is recommended to place the complex math into its own function and then call that function whenever necessary.</Body_Text>
                    <Example_Code Nature="Good" Language="Java">
                        <xhtml:div>public class Main {<xhtml:br/>
                            <xhtml:div style="margin-left:1em;">private double ComplexMath(double r, double s) {
                                <xhtml:div style="margin-left:1em;">//complex math equations
                                    <xhtml:br/>double pi = Math.PI;
                                    <xhtml:br/>double surface_area = pi * r * s + pi * Math.pow(r, 2);
                                    <xhtml:br/>return surface_area;</xhtml:div>
                                <xhtml:br/>}</xhtml:div><xhtml:br/>
                            <xhtml:div style="margin-left:1em;">public static void main(String[] args) {
                                <xhtml:div style="margin-left:1em;">double s = 10.0;
                                    <xhtml:br/>double r = 1.0;
                                    <xhtml:br/>double surface_area;<xhtml:br/>
                                    <xhtml:br/>if(r &gt; 0.0) {
                                    <xhtml:div style="margin-left:1em;">surface_area = ComplexMath(r, s);</xhtml:div>
                                    <xhtml:br/>}<xhtml:br/>
                                    <xhtml:br/>if(r &gt; 1.0) {
                                    <xhtml:div style="margin-left:1em;">surface_area = ComplexMath(r, s);</xhtml:div>
                                    <xhtml:br/>}</xhtml:div>
                                <xhtml:br/>}</xhtml:div><xhtml:br/>
                            <xhtml:br/>}</xhtml:div>
                    </Example_Code>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-19</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-19"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-10-13</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
                <Contribution Type="Content">
                    <Contribution_Name>Drew Buttner</Contribution_Name>
                    <Contribution_Date>2022-08-15</Contribution_Date>
                    <Contribution_Comment>Suggested new demonstrative examples, mitigations, and applicable platforms.</Contribution_Comment>
                </Contribution>
            </Content_History>
        </Weakness>
        <Weakness ID="1043" Name="Data Element Aggregating an Excessively Large Number of Non-Primitive Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses a data element that has an excessively large
                number of sub-elements with non-primitive data types such as structures or aggregated objects.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>While the interpretation of "excessively large" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1093" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-12</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-12"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1044" Name="Architecture with Number of Horizontal Layers Outside of Expected Range" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product's architecture contains too many - or too few -
                horizontal layers.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "expected range" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-9</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-9"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1045" Name="Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably, since the child might not perform essential destruction operations.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-17</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-17"/>
                <Reference External_Reference_ID="REF-977"/>
                <Reference External_Reference_ID="REF-978"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships, Type</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1046" Name="Creation of Immutable Text Using String Concatenation" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product creates an immutable text string using string concatenation operations.</Description>
            <Extended_Description><xhtml:p>When building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1176" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-2</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-2"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1047" Name="Modules with Circular Dependencies" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.</Description>
            <Extended_Description><xhtml:p>As an example, with Java, this weakness might indicate cycles between packages.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-7</Entry_ID>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-13</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-7"/>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-13"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1048" Name="Invokable Control Element with Large Number of Outward Calls" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains callable control elements that
                contain an excessively large number of references to other
                application objects external to the context of the callable,
                i.e. a Fan-Out value that is excessively large.</Description>
            <Extended_Description><xhtml:p>While the interpretation of "excessively large Fan-Out value" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-4</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-4"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1049" Name="Excessive Data Query Operations in a Large Data Table" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product performs a data query with a large number of joins
                and sub-queries on a large data table.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>While the interpretation of "large data table" and "large number of joins or sub-queries" may vary for each product or developer, CISQ recommends a default of 1 million rows for a "large" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1176" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-4</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-4"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1050" Name="Excessive Platform Resource Consumption within a Loop" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product has a loop body or loop condition that contains a control element that directly or
                indirectly consumes platform resources, e.g. messaging, sessions, locks, or file
                descriptors.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-8</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-8"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1051" Name="Initialization with Hard-Coded Network Resource Configuration Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product initializes data using hard-coded values that act as network resource identifiers.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="665" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-18</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-18"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-12-10</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1052" Name="Excessive Use of Hard-Coded Literals in Initialization" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product initializes a data element using a hard-coded
                literal that is not a simple integer or static constant element.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="665" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-3</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-3"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1053" Name="Missing Documentation for Design" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product does not have documentation that represents how it is designed.</Description>
            <Extended_Description><xhtml:p>This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1054" Name="Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code at one architectural layer invokes code that resides
                at a deeper layer than the adjacent layer, i.e., the invocation skips at least one
                layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-12</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-12"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1055" Name="Multiple Inheritance from Concrete Classes" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains a class with inheritance from more than
                one concrete class.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1093" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-2</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-2"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1056" Name="Invokable Control Element with Variadic Parameters" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A named-callable or method control element has a signature that
                supports a variable (variadic) number of parameters or arguments.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-8</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-8"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1057" Name="Data Access Operations Outside of Expected Data Manager Component" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-11</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-11"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1058" Name="Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains a function or method that
                operates in a multi-threaded environment but owns an unsafe non-final
                static storable or member data element.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1305" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="662" View_ID="1340" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-11</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-11"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-12-10</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1060" Name="Excessive Number of Inefficient Server-Side Data Accesses" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product performs too many data queries without using efficient data processing functionality such as stored procedures.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly due to computational expense.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>While the interpretation of "too many data queries" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-9</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-9"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1062" Name="Parent Class with References to Child Class" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code has a parent class that contains references to a child class, its methods, or its members.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-14</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-14"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1063" Name="Creation of Class Instance within a Static Code Block" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A static code block creates an instance of a class.</Description>
            <Extended_Description><xhtml:p>This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static.</xhtml:p>
                <xhtml:p>This issue can make the product perform more slowly by performing initialization before it is needed.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1176" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-1</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-1"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1064" Name="Invokable Control Element with Signature Containing an Excessive Number of Parameters" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains a function, subroutine, or method whose signature has an unnecessarily large number of
                parameters/arguments.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "large number of parameters." may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-13</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-13"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1065" Name="Runtime Resource Management Control Element in a Component Built to Run on Application Servers" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-5</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-5"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1066" Name="Missing Serialization Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains a serializable data element that does not
                have an associated serialization method.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably, e.g. by triggering an exception.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-2</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-2"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1067" Name="Excessive Execution of Sequential Searches of Data Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains a data query against an SQL table or view
                that is configured in a way that does not utilize an index and may cause
                sequential searches to be performed.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1176" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-5</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-5"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1068" Name="Inconsistency Between Implementation and Documented Design" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The implementation of the product is not consistent with the
                design as described within the relevant documentation.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
                <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1070" Name="Serializable Data Element Containing non-Serializable Item Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains a serializable, storable data element such as a field or member,
                but the data element contains member elements that are not
                serializable.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-3</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-3"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1071" Name="Empty Code Block" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code contains a block that does not contain any code, i.e., the block is empty.</Description>
            <Extended_Description><xhtml:p>Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc.  While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc.  For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1164" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2019-01-02</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships, Type</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1072" Name="Data Resource Access without Use of Connection Pooling" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product accesses a data resource through a database without using a
                connection pooling capability.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-13</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-13"/>
                <Reference External_Reference_ID="REF-974"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1073" Name="Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>While the interpretation of "large number of data accesses/queries" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-10</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-10"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1074" Name="Class with Excessively Deep Inheritance" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A class has an inheritance level that is too high, i.e., it
                has a large number of parent classes.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "large number of parent classes" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1093" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-17</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-17"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1075" Name="Unconditional Control Flow Transfer outside of Switch Block" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product performs unconditional control transfer (such as a
                "goto") in code outside of a branching structure such as a switch
                block.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-1</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-1"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1079" Name="Parent Class without Virtual Destructor Method" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably due to undefined or unexpected behaviors.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-16</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-16"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1080" Name="Source Code File with Excessive Number of Lines of Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A source code file has too many lines of
                code.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "too many lines of code" may vary for each product or developer, CISQ recommends a default threshold value of 1000.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-8</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-8"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1082" Name="Class Instance Self Destruction Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains a class instance that calls the method or function to delete or destroy itself.</Description>
            <Extended_Description><xhtml:p>For example, in C++, "delete this" will cause the object to delete itself.</xhtml:p>
                <xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-7</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-7"/>
                <Reference External_Reference_ID="REF-976"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1083" Name="Data Access from Outside Expected Data Manager Component" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.</Description>
            <Extended_Description><xhtml:p>When the product has a data access component, the design may be intended to handle all data access operations through that component.  If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.</xhtml:p>
                <xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-10</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-10"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1084" Name="Invokable Control Element with Excessive File or Data Access Operations" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A function or method contains too many
                operations that utilize a data manager or file resource.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "too many operations" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-14</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-14"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1085" Name="Invokable Control Element with Excessive Volume of Commented-out Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A function, method, procedure, etc. contains an excessive amount of code that has been
                commented out within its body.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "excessive volume" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-6</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-6"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1086" Name="Class with Excessive Number of Child Classes" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A class contains an unnecessarily large number of
                children.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p>
                <xhtml:p>While the interpretation of "large number of children" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1093" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-18</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-18"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1087" Name="Class with Virtual Method without a Virtual Destructor" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A class contains a virtual method, but the method does not have an associated virtual destructor.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably, e.g. due to undefined behavior.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-15</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-15"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1089" Name="Large Data Table with Excessive Number of Indices" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses a large data table that contains an excessively large number of
                indices.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>While the interpretation of "large data table" and "excessively large number of indices" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a "large" table and a default threshold of 3 indices.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-6</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-6"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1090" Name="Method Containing Access of a Member Element from Another Class" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>A method for a class performs an operation that directly
                accesses a member element from another class.</Description>
            <Extended_Description><xhtml:p>This issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-16</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-16"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1092" Name="Use of Same Invokable Control Element in Multiple Architectural Layers" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses the same control element across multiple
                architectural layers.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-10</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-10"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1094" Name="Excessive Index Range Scan for a Data Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product contains an index range scan for a large data table,
                but the scan can cover a large number of rows.</Description>
            <Extended_Description><xhtml:p>This issue can make the product perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.</xhtml:p>
                <xhtml:p>While the interpretation of "large data table" and "excessive index range" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="405" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Performance</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCPEM">
                    <Entry_ID>ASCPEM-PRF-7</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-959" Section="ASCPEM-PRF-7"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1095" Name="Loop Condition Value Update within the Loop" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses a loop with a control flow condition based on
                a value that is updated within the body of the loop.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-5</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-5"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1097" Name="Persistent Storable Data Element without Associated Comparison Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses a storable data element that does not have
                all of the associated functions or methods that are necessary to support
                comparison.</Description>
            <Extended_Description><xhtml:p>For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined.</xhtml:p>
                <xhtml:p>This issue can prevent the product from running reliably, due to incorrect or unexpected comparison results.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="595" View_ID="1305" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-4</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-4"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1098" Name="Data Element containing Pointer Item without Proper Copy Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains a data element with a pointer that does not have an associated copy or constructor method.</Description>
            <Extended_Description><xhtml:p>This issue can prevent the product from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Reliability</Impact>
                </Consequence>
            </Common_Consequences>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCRM">
                    <Entry_ID>ASCRM-RLB-6</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-961" Section="ASCRM-RLB-6"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-08-20</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships, Type</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1099" Name="Inconsistent Naming Conventions for Identifiers" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product's code, documentation, or other artifacts do not
                consistently use the same naming conventions for variables, callables, groups of
                related callables, I/O capabilities, data types, file names, or similar types of
                elements.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1100" Name="Insufficient Isolation of System-Dependent Functions" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product or code does not isolate system-dependent
                functionality into separate standalone modules.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1101" Name="Reliance on Runtime Component in Generated Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses automatically-generated code that cannot be
                executed without a specific runtime support component.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1102" Name="Reliance on Machine-Dependent Data Representation" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code uses a data representation that relies on low-level
                data representation or constructs that may vary across different processors,
                physical machines, OSes, or other physical components.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="758" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="PeerOf" CWE_ID="1105" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1103" Name="Use of Platform-Dependent Third Party Components" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product relies on third-party components that do
                not provide equivalent functionality across all desirable
                platforms.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="758" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1104" Name="Use of Unmaintained Third Party Components" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product relies on third-party components that are not
                actively supported or maintained by the original developer or a trusted proxy
                for the original developer.</Description>
            <Extended_Description><xhtml:p>Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1357" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
                <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-1212"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-10-28</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-04-28</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-10-13</Modification_Date>
                    <Modification_Comment>updated References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Description, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1105" Name="Insufficient Encapsulation of Machine-Dependent Functionality" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product or code uses machine-dependent functionality, but
                it does not sufficiently encapsulate or isolate this functionality from
                the rest of the code.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="758" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1106" Name="Insufficient Use of Symbolic Constants" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code uses literal constants that may need to change
                or evolve over time, instead of using symbolic constants.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1107" Name="Insufficient Isolation of Symbolic Constant Definitions" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code uses symbolic constants, but it does not
                sufficiently place the definitions of these constants into a more centralized or
                isolated location.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1108" Name="Excessive Reliance on Global Variables" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code is structured in a way that relies too much on using
                or setting global variables throughout various points in the code, instead of
                preserving the associated information in a narrower, more local
                context.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1076" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-14">
                    <Method>Automated Static Analysis</Method>
                    <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1109" Name="Use of Same Variable for Multiple Purposes" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains a callable, block, or other code element in
                which the same variable is used to control more than one unique task or store
                more than one instance of data.</Description>
            <Extended_Description><xhtml:p>Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1110" Name="Incomplete Design Documentation" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product's design documentation does not adequately describe
                control flow, data flow, system initialization, relationships between tasks,
                components, rationales, or other important aspects of the
                design.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Technology Class="Not Technology-Specific" Prevalence="Undetermined"/>
                <Technology Class="ICS/OT" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1111" Name="Incomplete I/O Documentation" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product's documentation does not adequately define inputs,
                outputs, or system/software interfaces.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1112" Name="Incomplete Documentation of Program Execution" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The document does not fully define all mechanisms that are used
                to control or influence how product-specific programs are
                executed.</Description>
            <Extended_Description><xhtml:p>This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1113" Name="Inappropriate Comment Style" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code uses comment styles or formats that are
                inconsistent or do not follow expected standards for the
                product.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1114" Name="Inappropriate Whitespace Style" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code contains whitespace that is inconsistent across
                the code or does not follow expected standards for the
                product.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1115" Name="Source Code Element without Standard Prologue" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code contains elements such as source files
                that do not consistently provide a prologue or header that has been
                standardized for the project.</Description>
            <Extended_Description><xhtml:p>The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1116" Name="Inaccurate Comments" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code contains comments that do not accurately
                describe or explain aspects of the portion of the code with which the comment is
                associated.</Description>
            <Extended_Description><xhtml:p>When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Verify that each comment accurately reflects what is intended to happen during execution of the code.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>In the following Java example the code performs a calculation to determine how much medicine to administer. A comment is provided to give insight into what the calculation shoud be doing. Unfortunately the comment does not match the actual code and thus leaves the reader to wonder which is correct.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        public class Main {<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                            public static void main(String[] args) {
                            <xhtml:div style="margin-left:1em;">
                                int pt_weight = 83;<xhtml:br/>
                                int mg_per_kg = 3;<xhtml:br/>
                                int daily_dose = 0;<xhtml:br/>
                                <xhtml:br/>
                                // Add the patient weight and Mg/Kg to calculate the correct daily dose<xhtml:br/>
                                daily_dose = pt_weight * mg_per_kg;<xhtml:br/>
                                return dosage;
                            </xhtml:div>
                            }
                        </xhtml:div>
                        }
                    </Example_Code>
                    <Body_Text>In the correction below, the code functionality has been verified, and the comment has been corrected to reflect the proper calculation.</Body_Text>
                    <Example_Code Nature="Good" Language="Java">
                        public class Main {<xhtml:br/>
                        <xhtml:div style="margin-left:1em;">
                            public static void main(String[] args) {
                            <xhtml:div style="margin-left:1em;">
                                int pt_weight = 83;<xhtml:br/>
                                int mg_per_kg = 3;<xhtml:br/>
                                int daily_dose = 0;<xhtml:br/>
                                <xhtml:br/>
                                // Multiply the patient weight and Mg/Kg to calculate the correct daily dose<xhtml:br/>
                                daily_dose = pt_weight * mg_per_kg;<xhtml:br/>
                                return dosage;
                            </xhtml:div>
                            }
                        </xhtml:div>
                        }
                    </Example_Code>
                    <Body_Text>Note that in real-world code, these values should be validated to disallow negative numbers, prevent integer overflow, etc.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2022-10-13</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Contribution Type="Content">
                    <Contribution_Name>Drew Buttner</Contribution_Name>
                    <Contribution_Date>2022-08-15</Contribution_Date>
                    <Contribution_Comment>Suggested new demonstrative examples, mitigations, and applicable platforms.</Contribution_Comment>
                </Contribution>
            </Content_History>
        </Weakness>
        <Weakness ID="1117" Name="Callable with Insufficient Behavioral Summary" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains a function or method whose signature and/or associated
                inline documentation does not sufficiently describe the callable's inputs, outputs,
                side effects, assumptions, or return codes.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1078" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1118" Name="Insufficient Documentation of Error Handling Techniques" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The documentation does not sufficiently describe the techniques
                that are used for error handling, exception processing, or similar
                mechanisms.</Description>
            <Extended_Description><xhtml:p>Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1059" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1119" Name="Excessive Use of Unconditional Branching" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code uses too many unconditional branches (such as
                "goto").</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="112" Name="Missing XML Validation" Abstraction="Base" Structure="Simple" Status="Draft">
            <Description>The product accepts XML from an untrusted source but does not validate the XML against the proper schema.</Description>
            <Extended_Description>Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.</Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1286" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Unexpected State</Impact>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-14">
                    <Method>Automated Static Analysis</Method>
                    <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Architecture and Design</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>
                        <xhtml:p>Always validate XML input against a known XML Schema or DTD.</xhtml:p>
                        <xhtml:p>It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.</xhtml:p>
                    </Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The following code loads and parses an XML file.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>
                            <xhtml:br/>
                            <xhtml:i>// Read DOM</xhtml:i>
                            <xhtml:br/>try {<xhtml:div style="margin-left:1em;">...<xhtml:br/>DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<xhtml:br/>factory.setValidating( false );<xhtml:br/>....<xhtml:br/>c_dom = factory.newDocumentBuilder().parse( xmlFile );</xhtml:div>} catch(Exception ex) {<xhtml:div style="margin-left:1em;">...</xhtml:div>}</xhtml:div>
                    </Example_Code>
                    <Body_Text>The XML file is loaded without validating it against a known XML Schema or DTD.</Body_Text>
                </Demonstrative_Example>
                <Demonstrative_Example>
                    <Intro_Text>The following code creates a DocumentBuilder object to be used in building an XML document.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();<xhtml:br/>builderFactory.setNamespaceAware(true);<xhtml:br/>DocumentBuilder builder = builderFactory.newDocumentBuilder();</xhtml:div>
                    </Example_Code>
                    <Body_Text>The DocumentBuilder object does not validate an XML document against a schema, making it possible to create an invalid XML document.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
                    <Entry_Name>Missing XML Validation</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
                    <Entry_ID>SFP24</Entry_ID>
                    <Entry_Name>Tainted input to command</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="230"/>
                <Related_Attack_Pattern CAPEC_ID="231"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-6"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Sean Eidemiller</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-11-24</Modification_Date>
                    <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-10-29</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2013-02-21</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-02-18</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-06-23</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Other_Notes, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-01-19</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1121" Name="Excessive McCabe Cyclomatic Complexity" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains McCabe cyclomatic complexity that exceeds a
                desirable maximum.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="OMG ASCMM">
                    <Entry_ID>ASCMM-MNT-11</Entry_ID>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <References>
                <Reference External_Reference_ID="REF-963"/>
                <Reference External_Reference_ID="REF-964"/>
                <Reference External_Reference_ID="REF-960" Section="ASCMM-MNT-11"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated References, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1122" Name="Excessive Halstead Complexity" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code is structured in a way that a Halstead complexity
                measure exceeds a desirable maximum.</Description>
            <Extended_Description><xhtml:p>A variety of Halstead complexity measures exist, such as program vocabulary size or volume.</xhtml:p>
                <xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
                <Reference External_Reference_ID="REF-965"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1123" Name="Excessive Use of Self-Modifying Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product uses too much self-modifying
                code.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1124" Name="Excessively Deep Nesting" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code contains a callable or other code grouping in which
                the nesting / branching is too deep.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <References>
                <Reference External_Reference_ID="REF-963"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1125" Name="Excessive Attack Surface" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product has an attack surface whose quantitative
                measurement exceeds a desirable maximum.</Description>
            <Extended_Description><xhtml:p>Originating from software security, an "attack surface" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses.  In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="1120" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <References>
                <Reference External_Reference_ID="REF-966"/>
                <Reference External_Reference_ID="REF-967"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1126" Name="Declaration of Variable with Unnecessarily Wide Scope" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The source code declares a variable in one scope, but the
                variable is only used within a narrower scope.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1127" Name="Compilation with Insufficient Warnings or Errors" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The code is compiled without sufficient warnings enabled, which
                may prevent the detection of subtle bugs or quality
                issues.</Description>
            <Extended_Description><xhtml:p>This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.</xhtml:p></Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Build and Compilation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Other</Scope>
                    <Impact>Reduce Maintainability</Impact>
                </Consequence>
            </Common_Consequences>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-07-02</Submission_Date>
                    <Submission_Comment>Entry derived from Common Quality Enumeration (CQE) Draft 0.9.</Submission_Comment>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="115" Name="Misinterpretation of Input" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.</Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Unexpected State</Impact>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-13">
                    <Method>Fuzzing</Method>
                    <Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2005-2225</Reference>
                    <Description>Product sees dangerous file extension in free text of a group discussion, disconnects all users.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2005-2225</Link>
                </Observed_Example>
                <Observed_Example>
                    <Reference>CVE-2001-0003</Reference>
                    <Description>Product does not correctly import and process security settings from another product.</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2001-0003</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="PLOVER">
                    <Entry_Name>Misinterpretation Error</Entry_Name>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Notes>
                <Note Type="Research Gap">This concept needs further study. It is likely a factor in several weaknesses, possibly resultant as well. Overlaps Multiple Interpretation Errors (MIE).</Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>PLOVER</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-10-29</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-27</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2008-04-11">Misinterpretation Error</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="117" Name="Improper Output Neutralization for Logs" Abstraction="Base" Structure="Simple" Status="Draft">
            <Description>The product does not neutralize or incorrectly neutralizes output that is written to logs.</Description>
            <Extended_Description>
                <xhtml:p>This can allow an attacker to forge log entries or inject malicious content into logs.</xhtml:p>
                <xhtml:p>Log forging vulnerabilities occur when:</xhtml:p>
                <xhtml:ol>
                    <xhtml:li>Data enters an application from an untrusted source.</xhtml:li>
                    <xhtml:li>The data is written to an application or system log file.</xhtml:li>
                </xhtml:ol>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="116" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Background_Details>
                <Background_Detail>Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.</Background_Detail>
            </Background_Details>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Scope>Confidentiality</Scope>
                    <Scope>Availability</Scope>
                    <Scope>Non-Repudiation</Scope>
                    <Impact>Modify Application Data</Impact>
                    <Impact>Hide Activities</Impact>
                    <Impact>Execute Unauthorized Code or Commands</Impact>
                    <Note>Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-14">
                    <Method>Automated Static Analysis</Method>
                    <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
                    <Effectiveness>High</Effectiveness>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation Mitigation_ID="MIT-5">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>
                        <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                        <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                        <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                    </Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-30">
                    <Phase>Implementation</Phase>
                    <Strategy>Output Encoding</Strategy>
                    <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
                </Mitigation>
                <Mitigation Mitigation_ID="MIT-20">
                    <Phase>Implementation</Phase>
                    <Strategy>Input Validation</Strategy>
                    <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Demonstrative_Examples>
                <Demonstrative_Example>
                    <Intro_Text>The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened.</Intro_Text>
                    <Example_Code Nature="Bad" Language="Java">
                        <xhtml:div>String val = request.getParameter("val");<xhtml:br/>try {<xhtml:div style="margin-left:1em;">
                            <xhtml:div>
                                <xhtml:br/>int value = Integer.parseInt(val);</xhtml:div>
                        </xhtml:div>}<xhtml:br/>catch (NumberFormatException) {<xhtml:div style="margin-left:1em;">log.info("Failed to parse val = " + val);</xhtml:div>}<xhtml:br/>...</xhtml:div>
                    </Example_Code>
                    <Body_Text>If a user submits the string "twenty-one" for val, the following entry is logged:</Body_Text>
                    <Body_Text>
                        <xhtml:ul>
                            <xhtml:li>
                                <xhtml:div>INFO: Failed to parse val=twenty-one</xhtml:div>
                            </xhtml:li>
                        </xhtml:ul>
                    </Body_Text>
                    <Body_Text>However, if an attacker submits the string "twenty-one%0a%0aINFO:+User+logged+out%3dbadguy", the following entry is logged:</Body_Text>
                    <Body_Text>
                        <xhtml:ul>
                            <xhtml:li>
                                <xhtml:div>INFO: Failed to parse val=twenty-one</xhtml:div>
                            </xhtml:li>
                            <xhtml:li>
                                <xhtml:div>INFO: User logged out=badguy</xhtml:div>
                            </xhtml:li>
                        </xhtml:ul>
                    </Body_Text>
                    <Body_Text>Clearly, attackers can use this same mechanism to insert arbitrary log entries.</Body_Text>
                </Demonstrative_Example>
            </Demonstrative_Examples>
            <Observed_Examples>
                <Observed_Example>
                    <Reference>CVE-2006-4624</Reference>
                    <Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description>
                    <Link>https://www.cve.org/CVERecord?id=CVE-2006-4624</Link>
                </Observed_Example>
            </Observed_Examples>
            <Taxonomy_Mappings>
                <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
                    <Entry_Name>Log Forging</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
                    <Entry_ID>SFP23</Entry_ID>
                    <Entry_Name>Exposed Data</Entry_Name>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
                    <Entry_ID>IDS03-J</Entry_ID>
                    <Entry_Name>Do not log unsanitized user input</Entry_Name>
                    <Mapping_Fit>Exact</Mapping_Fit>
                </Taxonomy_Mapping>
                <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
                    <Entry_ID>IDS03-J</Entry_ID>
                    <Entry_Name>Do not log unsanitized user input</Entry_Name>
                    <Mapping_Fit>Exact</Mapping_Fit>
                </Taxonomy_Mapping>
            </Taxonomy_Mappings>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="268"/>
                <Related_Attack_Pattern CAPEC_ID="81"/>
                <Related_Attack_Pattern CAPEC_ID="93"/>
            </Related_Attack_Patterns>
            <References>
                <Reference External_Reference_ID="REF-6"/>
                <Reference External_Reference_ID="REF-52"/>
                <Reference External_Reference_ID="REF-53"/>
                <Reference External_Reference_ID="REF-43"/>
            </References>
            <Content_History>
                <Submission>
                    <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
                    <Submission_Date>2006-07-19</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>Eric Dalci</Modification_Name>
                    <Modification_Organization>Cigital</Modification_Organization>
                    <Modification_Date>2008-07-01</Modification_Date>
                    <Modification_Comment>updated References, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-09-08</Modification_Date>
                    <Modification_Comment>updated Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2008-11-24</Modification_Date>
                    <Modification_Comment>updated Background_Details, Common_Consequences, Description, Other_Notes, References</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-03-10</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-05-27</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples, Description, Name, Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-07-27</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2009-10-29</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Other_Notes, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-06-21</Modification_Date>
                    <Modification_Comment>updated Description, Name</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2010-12-13</Modification_Date>
                    <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-03-29</Modification_Date>
                    <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2011-06-01</Modification_Date>
                    <Modification_Comment>updated Common_Consequences</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-05-11</Modification_Date>
                    <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2012-10-30</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2014-07-30</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-05-03</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2017-11-08</Modification_Date>
                    <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-06-20</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations, References, Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-10-28</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
                </Modification>
                <Previous_Entry_Name Date="2008-04-11">Log Forging</Previous_Entry_Name>
                <Previous_Entry_Name Date="2009-05-27">Incorrect Output Sanitization for Logs</Previous_Entry_Name>
                <Previous_Entry_Name Date="2010-06-21">Improper Output Sanitization for Logs</Previous_Entry_Name>
            </Content_History>
        </Weakness>
        <Weakness ID="1173" Name="Improper Use of Validation Framework" Abstraction="Base" Structure="Simple" Status="Draft">
            <Description>The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.</Description>
            <Extended_Description>Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.</Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="1000" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Indirect</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Applicable_Platforms>
                <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            </Applicable_Platforms>
            <Modes_Of_Introduction>
                <Introduction>
                    <Phase>Architecture and Design</Phase>
                    <Note>This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.</Note>
                </Introduction>
                <Introduction>
                    <Phase>Implementation</Phase>
                    <Note>This weakness may occur when developers do not correctly use a provided input validation framework.</Note>
                </Introduction>
            </Modes_Of_Introduction>
            <Common_Consequences>
                <Consequence>
                    <Scope>Integrity</Scope>
                    <Impact>Unexpected State</Impact>
                    <Note>Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.</Note>
                </Consequence>
            </Common_Consequences>
            <Detection_Methods>
                <Detection_Method Detection_Method_ID="DM-3">
                    <Method>Automated Static Analysis</Method>
                    <Description>
                        <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                        <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                        <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                    </Description>
                </Detection_Method>
            </Detection_Methods>
            <Potential_Mitigations>
                <Mitigation>
                    <Phase>Implementation</Phase>
                    <Description>Properly use provided input validation frameworks.</Description>
                </Mitigation>
            </Potential_Mitigations>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2018-12-21</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-06-25</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-10-28</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
        <Weakness ID="1188" Name="Insecure Default Initialization of Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
            <Description>The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.</Description>
            <Extended_Description><xhtml:p>Developers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value.  However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.</xhtml:p>
            </Extended_Description>
            <Related_Weaknesses>
                <Related_Weakness Nature="ChildOf" CWE_ID="665" View_ID="1000" Ordinal="Primary"/>
                <Related_Weakness Nature="ChildOf" CWE_ID="665" View_ID="1003" Ordinal="Primary"/>
            </Related_Weaknesses>
            <Weakness_Ordinalities>
                <Weakness_Ordinality>
                    <Ordinality>Primary</Ordinality>
                </Weakness_Ordinality>
            </Weakness_Ordinalities>
            <Related_Attack_Patterns>
                <Related_Attack_Pattern CAPEC_ID="665"/>
            </Related_Attack_Patterns>
            <Notes>
                <Note Type="Maintenance">This entry improves organization of concepts under initialization.  The typical CWE model is to cover "Missing" and "Incorrect" behaviors.  Arguably, this entry could be named as "Incorrect" instead of "Insecure."  This might be changed in the near future.</Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2019-03-25</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2021-07-20</Modification_Date>
                    <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-01-31</Modification_Date>
                    <Modification_Comment>updated Description</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Weakness>
    </Weaknesses>
    <Categories>
        <Category ID="1006" Name="Bad Coding Practices" Status="Draft">
            <Summary>Weaknesses in this category are related to coding practices that are deemed unsafe and increase the
                chances that an exploitable vulnerability will be present in the application. These weaknesses do not
                directly introduce a vulnerability, but indicate that the product has not been carefully developed or
                maintained. If a program is complex, difficult to maintain, not portable, or shows evidence of neglect,
                then there is a higher likelihood that weaknesses are buried in the code.
            </Summary>
            <Relationships>
                <Has_Member CWE_ID="358" View_ID="699"/>
                <Has_Member CWE_ID="360" View_ID="699"/>
                <Has_Member CWE_ID="478" View_ID="699"/>
                <Has_Member CWE_ID="487" View_ID="699"/>
                <Has_Member CWE_ID="489" View_ID="699"/>
                <Has_Member CWE_ID="547" View_ID="699"/>
                <Has_Member CWE_ID="561" View_ID="699"/>
                <Has_Member CWE_ID="562" View_ID="699"/>
                <Has_Member CWE_ID="563" View_ID="699"/>
                <Has_Member CWE_ID="581" View_ID="699"/>
                <Has_Member CWE_ID="586" View_ID="699"/>
                <Has_Member CWE_ID="605" View_ID="699"/>
                <Has_Member CWE_ID="628" View_ID="699"/>
                <Has_Member CWE_ID="654" View_ID="699"/>
                <Has_Member CWE_ID="656" View_ID="699"/>
                <Has_Member CWE_ID="694" View_ID="699"/>
                <Has_Member CWE_ID="807" View_ID="699"/>
                <Has_Member CWE_ID="1041" View_ID="699"/>
                <Has_Member CWE_ID="1043" View_ID="699"/>
                <Has_Member CWE_ID="1044" View_ID="699"/>
                <Has_Member CWE_ID="1045" View_ID="699"/>
                <Has_Member CWE_ID="1046" View_ID="699"/>
                <Has_Member CWE_ID="1048" View_ID="699"/>
                <Has_Member CWE_ID="1049" View_ID="699"/>
                <Has_Member CWE_ID="1050" View_ID="699"/>
                <Has_Member CWE_ID="1063" View_ID="699"/>
                <Has_Member CWE_ID="1065" View_ID="699"/>
                <Has_Member CWE_ID="1066" View_ID="699"/>
                <Has_Member CWE_ID="1067" View_ID="699"/>
                <Has_Member CWE_ID="1070" View_ID="699"/>
                <Has_Member CWE_ID="1071" View_ID="699"/>
                <Has_Member CWE_ID="1072" View_ID="699"/>
                <Has_Member CWE_ID="1073" View_ID="699"/>
                <Has_Member CWE_ID="1079" View_ID="699"/>
                <Has_Member CWE_ID="1082" View_ID="699"/>
                <Has_Member CWE_ID="1084" View_ID="699"/>
                <Has_Member CWE_ID="1085" View_ID="699"/>
                <Has_Member CWE_ID="1087" View_ID="699"/>
                <Has_Member CWE_ID="1089" View_ID="699"/>
                <Has_Member CWE_ID="1092" View_ID="699"/>
                <Has_Member CWE_ID="1094" View_ID="699"/>
                <Has_Member CWE_ID="1097" View_ID="699"/>
                <Has_Member CWE_ID="1098" View_ID="699"/>
                <Has_Member CWE_ID="1099" View_ID="699"/>
                <Has_Member CWE_ID="1101" View_ID="699"/>
                <Has_Member CWE_ID="1102" View_ID="699"/>
                <Has_Member CWE_ID="1103" View_ID="699"/>
                <Has_Member CWE_ID="1104" View_ID="699"/>
                <Has_Member CWE_ID="1106" View_ID="699"/>
                <Has_Member CWE_ID="1107" View_ID="699"/>
                <Has_Member CWE_ID="1108" View_ID="699"/>
                <Has_Member CWE_ID="1109" View_ID="699"/>
                <Has_Member CWE_ID="1113" View_ID="699"/>
                <Has_Member CWE_ID="1114" View_ID="699"/>
                <Has_Member CWE_ID="1115" View_ID="699"/>
                <Has_Member CWE_ID="1116" View_ID="699"/>
                <Has_Member CWE_ID="1117" View_ID="699"/>
                <Has_Member CWE_ID="1126" View_ID="699"/>
                <Has_Member CWE_ID="1127" View_ID="699"/>
                <Has_Member CWE_ID="1235" View_ID="699"/>
            </Relationships>
            <Notes>
                <Note Type="Mapping">
                    <xhtml:p>Use for Mapping: Prohibited (this CWE ID must not be used to map to real-world
                        vulnerabilities).
                    </xhtml:p>
                    <xhtml:p>Rationale: this entry is a Category. Using categories for mapping has been an actively
                        discouraged practice since at least 2019. Categories are informal organizational groupings of
                        weaknesses that help navigation and browsing by CWE users, but they are not weaknesses in
                        themselves.
                    </xhtml:p>
                    <xhtml:p>Comments: See member weaknesses of this category.</xhtml:p>
                </Note>
            </Notes>
            <Content_History>
                <Submission>
                    <Submission_Name>CWE Content Team</Submission_Name>
                    <Submission_Organization>MITRE</Submission_Organization>
                    <Submission_Date>2017-06-29</Submission_Date>
                </Submission>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2019-01-03</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2020-02-24</Modification_Date>
                    <Modification_Comment>updated Relationships</Modification_Comment>
                </Modification>
                <Modification>
                    <Modification_Name>CWE Content Team</Modification_Name>
                    <Modification_Organization>MITRE</Modification_Organization>
                    <Modification_Date>2023-04-27</Modification_Date>
                    <Modification_Comment>updated Mapping_Notes, Relationships</Modification_Comment>
                </Modification>
            </Content_History>
        </Category>
    </Categories>
</Weakness_Catalog>